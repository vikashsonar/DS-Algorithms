// C/C++ program to segregate even and odd nodes in a
// Linked List
#include <stdio.h>
#include <stdlib.h>

/* a node of the singly linked list */
struct node
{
	int data;
	struct node *next;
};

void segregateEvenOdd(struct node **head_ref)
{
	struct node* end = *head_ref;
	struct node* current = *head_ref;
	struct node* prev = NULL;
	
	// remember last node
	while (end->next != NULL)
	{
	    end = end->next;
	}
	struct node* newEnd = end;
	
	current = *head_ref;
	bool shouldBreak = false;
	while (current)
	{
	    if (current->data % 2 != 0)
	    {
	        newEnd->next = current;
	        newEnd = current;
	        
	        // needs to move head if head node has odd value
	        if (current == *head_ref)
	        {
	            (*head_ref) = current->next;
	        }
	        else
	        {
	            prev->next = current->next;
	        }
	        
	        current = current->next;
	        newEnd->next = NULL;
	    }
	    else
	    {
	        prev = current;
	        current = current->next;
	    }
	    
	    // This is done for last node
	    if (shouldBreak)
	    {
	        break;
	    }
	    if (current == end)
	    {
	       shouldBreak = true; 
	    }
	}
}

/* UTILITY FUNCTIONS */
/* Function to insert a node at the beginning */
void push(struct node** head_ref, int new_data)
{
	/* allocate node */
	struct node* new_node =
		(struct node*) malloc(sizeof(struct node));

	/* put in the data */
	new_node->data = new_data;

	/* link the old list off the new node */
	new_node->next = (*head_ref);

	/* move the head to point to the new node */
	(*head_ref) = new_node;
}

/* Function to print nodes in a given linked list */
void printList(struct node *node)
{
	while (node!=NULL)
	{
		printf("%d ", node->data);
		node = node->next;
	}
}

/* Drier program to test above functions*/
int main()
{
	/* Start with the empty list */
	struct node* head = NULL;

	/* Let us create a sample linked list as following
	0->2->4->6->8->10->11 */

    push(&head, 6);
    push(&head, 7);
    push(&head, 1);
	push(&head, 4);
	push(&head, 5);
	push(&head, 10);
	push(&head, 12);
	push(&head, 8);
	push(&head, 15);
	push(&head, 17);

	printf("\nOriginal Linked list \n");
	printList(head);

	segregateEvenOdd(&head);

	printf("\nModified Linked list \n");
	printList(head);

	return 0;
}
