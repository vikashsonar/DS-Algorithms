// A recursive program to add two linked lists
// Each LL represent one number, L1:123456
#include <stdio.h>
#include <stdlib.h>

// A linked List Node
struct node
{
	int data;
	struct node* next;
};

typedef struct node node;

/* A utility function to insert a node at the beginning of linked list */
void push(struct node** head_ref, int new_data)
{
	/* allocate node */
	struct node* new_node = (struct node*) malloc(sizeof(struct node));

	/* put in the data */
	new_node->data = new_data;

	/* link the old list off the new node */
	new_node->next = (*head_ref);

	/* move the head to point to the new node */
	(*head_ref) = new_node;
}

/* A utility function to print linked list */
void printList(struct node *node)
{
    printf("\n");
	while (node != NULL)
	{
		printf("%d ", node->data);
		node = node->next;
	}
	printf("\n");
}

unsigned int GetListNodeCount (node* head)
{
    unsigned int cnt = 0;
    while (head != NULL)
    {
        ++cnt;
    	head = head->next;
    }
    return cnt;
}

// The main function that adds two linked lists represented by head1 and head2.
// The sum of two lists is stored in a list referred by result
int addListInternal(node* head1, node* head2, node** result)
{
    if (head1 == NULL && head2 == NULL)
    {
        return 0;
    }
	int carry = addListInternal (head1->next, head2->next, result);
	
	printf("\nH11:%d ", head1->data);
    printf("\nH22:%d ", head2->data);

	int sum = head1->data + head2->data + carry;
	if (sum >= 10)
	{
	    sum = sum - 10;
	    carry = 1;
	}
	push (result, sum);
	
	if (carry == 1)
	{
	    return carry;
	}
	else
	{
	    return 0;
	}
}

int AddRemaining (node* head, node* tempNode, int& carry, node** result)
{
    if (head == tempNode)
    {
        return 0;
    }
    AddRemaining (head->next, tempNode, carry, result);
    
    int sum = head->data + carry;
    carry = 0;
	if (sum >= 10)
	{
	    sum = sum - 10;
	    carry = 1;
	}
	push (result, sum);
	return carry;
}

void addList(node* head1, node* head2, node** result)
{
    unsigned int cnt1 = GetListNodeCount (head1);
    unsigned int cnt2 = GetListNodeCount (head2);
    
    int carry = 0;
    if (cnt1 == cnt2)
    {
        carry = addListInternal (head1, head2, result);
    }
    else
    {
        int diff = cnt1 - cnt2;
        if (diff > 0)
        {
            node* tempNode = head1;
            while (diff--)
            {
                tempNode = tempNode->next;
            }
            carry = addListInternal (tempNode, head2, result);
            carry = AddRemaining (head1, tempNode, carry, result);
        }
        else
        {
            node* tempNode = head2;
            while (diff++)
            {
                tempNode = tempNode->next;
            }
            carry = addListInternal (head1, tempNode, result);
            carry = AddRemaining (head2, tempNode, carry, result);
        }
        
    }
    if (carry == 1)
    {
        push (result, 1);
    }
}

// Driver program to test above functions
int main()
{
	node *head1 = NULL, *head2 = NULL, *result = NULL;

	int arr1[] = {1,2,3,4, 5, 6};
	int arr2[] = {9, 9};
	//int arr1[] = {9, 9, 9};
	//int arr2[] = {9, 9, 9};

	int size1 = sizeof(arr1) / sizeof(arr1[0]);
	int size2 = sizeof(arr2) / sizeof(arr2[0]);

	// Create first list as 9->9->9
	int i;
	for (i = size1-1; i >= 0; --i)
		push(&head1, arr1[i]);

	// Create second list as 1->8
	for (i = size2-1; i >= 0; --i)
		push(&head2, arr2[i]);

	addList(head1, head2, &result);

	printList(result);

	return 0;
}
